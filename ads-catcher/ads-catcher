#!/bin/sh
##############################################################################
# PEB <pebdev@lavache.com>
# 2019.03.24
##############################################################################
# Copyright (C) 2019 
# This file is copyright under the latest version of the EUPL.
# Please see https://joinup.ec.europa.eu/collection/eupl for your rights 
# under this license.
##############################################################################

# ads-catcher internal informations
ADSC_VERSION="v1.1.1"

# Log, settings and temporary files
ADSC_TMPFILE=/tmp/ads-catcher.tmp
ADSC_SETTINGS=/etc/ads-catcher.cfg
PIHOLE_LOGFILE=/var/log/pihole.log
PIHOLE_BLACKLIST_FILE=/etc/pihole/blacklist.txt

# Blacklist files
ADSC_BLACKLIST_FOLDER=/usr/share/ads-catcher/blacklist
ADSC_HISTORY_FOLDER=/usr/share/ads-catcher/history/
YOUTUBE_BLACKLIST=$ADSC_BLACKLIST_FOLDER/youtube-blacklist.txt


##############################################################################
# @brief : function to read setting from configruation file
# @param $1 : configuration name to read
# @return value of the setting
##############################################################################
readSetting () {

  # Read value of the wanted seeting
  echo "`cat $ADSC_SETTINGS | grep $1 | tr -d ' ' | cut -d= -f2`"
}


##############################################################################
# @brief : function to add path of ads-catcher blacklist files
##############################################################################
addBlacklistFilesToPihole () {
  
  # Content of the pihole blacklist file
  PIHOLE_BLACKLIST_CONTENT="`cat $PIHOLE_BLACKLIST_FILE`"

  # List of ads-catcher files
  ADSC_BLACKLIST_FILES="`ls -d $ADSC_BLACKLIST_FOLDER/*`"

  # Save result into the blacklist file
  echo "$PIHOLE_BLACKLIST_CONTENT\n$ADSC_BLACKLIST_FILES" | awk 'NF' | tr -d ' ' | sort -u | uniq -u  > $PIHOLE_BLACKLIST_FILE
}


##############################################################################
# @brief : function to add blacklisted addresses directly inside the pi-hole 
#          blacklist file
##############################################################################
addBlacklistAddressesToPihole () {
 
  # Remove ads-catcher blacklist files from pi-hole blacklist
  sed -i '/ads-catcher\//d' $PIHOLE_BLACKLIST_FILE

  # Content of the pihole blacklist file
  PIHOLE_BLACKLIST_CONTENT="`cat $PIHOLE_BLACKLIST_FILE`"

  # ads-catcher file list
  ADSC_BLACKLIST_FILELIST="`ls -d $ADSC_BLACKLIST_FOLDER/*`"

  # Content of the ads-catcher blacklist file
  ADSC_BLACKLIST_CONTENT="`cat $ADSC_BLACKLIST_FILELIST`"

  # Save result into the blacklist file
  Y1=`echo "$PIHOLE_BLACKLIST_CONTENT\n$ADSC_BLACKLIST_CONTENT" | awk 'NF' | tr -d ' ' | sort -u | uniq -u`
  echo "$Y1" > $PIHOLE_BLACKLIST_FILE
}

##############################################################################
# @brief : function to know if we need to update pihole after calling a catcher
# @param $1 : file that contains list of addresses to block
# @return 1 if we need to update pihole, otherwise 0
##############################################################################
isPiholeUpdateNeeded () {

  # Argument check
  if [ $# -lt 1 ]; then
    echo "[isPiholeUpdateNeeded] ERROR, missing argument"
    return 0
  fi

  # Parameters
  BLACKLIST_FILE=$1

  # Extract service name
  SERVICE_NAME=`echo $BLACKLIST_FILE | sed 's/\-blacklist.txt'//`
  SERVICE_NAME=`basename $SERVICE_NAME`

  # Compute number of entries
  NB_ENTRIES=`wc -l $BLACKLIST_FILE | cut -d\  -f1`

  # Just for history, do a backup of this file
  if [ $ADSC_CONF_BLACKLIST_BACKUP -eq 1 ]; then
    BACKUP_NAME="$SERVICE_NAME-$NB_ENTRIES.txt"
    cp $BLACKLIST_FILE $ADSC_HISTORY_FOLDER/$BACKUP_NAME
  fi

  # Extract previous number of entries
  PREVIOUS_NB_ENTRIES=`cat $ADSC_TMPFILE | grep $SERVICE_NAME | cut -d= -f2`

  # Update pihole with new entries
  if [ "$NB_ENTRIES" != "$PREVIOUS_NB_ENTRIES" ]; then
    RETVAL=1

    # Save state of this update
    echo "$SERVICE_NAME=$NB_ENTRIES" > $ADSC_TMPFILE

  else
    RETVAL=0
  fi

  return $RETVAL
}


##############################################################################
# @brief : function to update blacklist file with clean feature
# @param $1 : blacklist file that contains list of addresses to block
# @param $2 : list of addresses to add
##############################################################################
updateServiceBlacklistFile() {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[updateServiceBlacklistFile] ERROR, missing argument :"
    return
  fi

  # Parameters
  BLACKLIST_FILE=$1
  Y1=$2

  # Get previous blacklisted addresses
  Y2=`cat $BLACKLIST_FILE`

  # Save result into the blacklist file
  echo "$Y1\n$Y2" | awk 'NF' | tr -d ' ' | sort -u | uniq -u > $BLACKLIST_FILE
}


##############################################################################
# @brief : function to remove whitelisted address from the blacklist file
# @param $1 : blacklist file that contains list of addresses to block
# @param $2 : whitelisted address
##############################################################################
whitelistFiltering () {

  # Argument check
  if [ $# -lt 2 ]; then
    echo "[whitelistFiltering] ERROR, missing argument :"
    return
  fi

  # Parameters
  BLACKLIST_FILE=$1
  Y1=$2

  Y2="$(cat $BLACKLIST_FILE | sed "/$Y1/d" | awk 'NF' | tr -d ' ' | sort -u)"
  echo "$Y2" > $BLACKLIST_FILE
}


##############################################################################
# @brief : function to catch youtube ads
# @return 1 if we need to update pihole, otherwise 0
##############################################################################
catcherYoutube () {

  # be sure that the blacklist file exist
  touch $YOUTUBE_BLACKLIST
  
  # Extract dns request from the pihole logfiles
  Y2="$({ gunzip -d pihole.log.*.gz --to-stdout & cat pihole.log pihole.log.1; } 2>/dev/null | awk '$5 ~ /^query/ && $6 ~ /googlevideo\.com$/{print $6}' | sort -u)"

  # Update service blacklist file
  updateServiceBlacklistFile "$YOUTUBE_BLACKLIST" "$Y2"

  # Do a whitelist filtering
  whitelistFiltering "$YOUTUBE_BLACKLIST" "redirector.googlevideo.com"
  whitelistFiltering "$YOUTUBE_BLACKLIST" "manifest.googlevideo.com"

  # Check treatments result
  isPiholeUpdateNeeded "$YOUTUBE_BLACKLIST"

  return $?
}


##############################################################################
### MAIN ###
##############################################################################
echo "ads-catcher - $ADSC_VERSION"

# Settings
ADSC_CONF_BLACKLIST_BACKUP=$(readSetting blacklist_backup)
ADSC_CONF_BLACKLIST_SEPARATED_FILES=$(readSetting blacklist_seperated_files)

# Create blacklist folder and tmp files to be sure
touch $ADSC_TMPFILE
mkdir -p $ADSC_BLACKLIST_FOLDER
mkdir -p $ADSC_HISTORY_FOLDER

# Call different catchers
catcherYoutube
RETVAL_YOUTUBE=$?

if [ $RETVAL_YOUTUBE -eq 1 ]; then
  
  if [ $ADSC_CONF_BLACKLIST_SEPARATED_FILES -eq 1 ]; then
    # Refresh list of blacklist files
    addBlacklistFilesToPihole
  else
    # Case of not separated files of blacklisted addresses
    addBlacklistAddressesToPihole
  fi

  # Update pihole with new entries
  /usr/local/bin/pihole -g
fi

